
                    Building Yzis


Yzis uses CMake for managing the build.

To get started, create a directory build, enter it and type:
cmake ..

CMake will start to look for the dependencies. If all of them are satisfied,
it will generate Makefiles.

You can pass options and variables to CMAKE with the -D flag:
cmake -DENABLE_NYZIS=off to disable for example the nyzis building.

This list of available options are:
- ENABLE_NYZIS: build the ncurses based frontend. Default is ON when ncurses
  is found. 
- ENABLE_QYZIS: build the Qt frontend. Default is ON on linux when Qt is
  found, and OFF on windows (until I can make it compile on windows).
- ENABLE_LIBYZISRUNNER: build the frontend used to test the library. Default
  is ON.
- CMAKE_VERBOSE_MAKEFILE: default is OFF, allows to see the exact
  compilation lines. Very useful when something does not work, to understand
  what cmake is actually doing. You can still get verbose output by typing
VERBOSE=1 make
when executing make.
- ENABLE_DOCUMENTATION: generate the documentation when building (doxygen
  needed), default OFF
- ENABLE_TESTS: generate an executable to run the unit tests, default is ON.

You can choose between debug or release configuration with:
-DCMAKE_BUILD_TYPE=Debug
or
-DCMAKE_BUILD_TYPE=Release

Yzis depends on the following libraries:
- Qt, for its engine (the gui part of Qt is not used)
- Lua 5.0 for its scripting engine
- optional: libmagic for recognising file types and associating the correct
  syntax file
- ncurses, which is mandatory when building the nyzis

For Qt, you need to have the QTDIR environment variable pointing to Qt,
version above 4.0

For Lua, you need to have it installed in /usr/lib or /usr/local/lib, or to
specify it with the following variables:
- LIBLUA50_INCLUDE_DIR: place to find lua.h
- LIBLUALIB50_INCLUDE_DIR: place to find lualib.h (usually, the same)
- LIBLUA50_LIBRARIES: place to find liblua.so
- LIBLUALIB50_LIBRARIES: place to find liblualib.so (usually, the same)

Building on windows:
====================

On windows, the compiler must be mingw. When you install Qt 4 for windows, Qt
proposed to download and install mingw automatically.

When using cmake, you need to specify the generator as mingw:
cmake -G "MinGW Makefiles" .. 

You will probably need to specify the lua libraries explicitely. My build
line on windows look like this:

cmake -G "MinGW Makefiles" -DLIBLUA50_LIBRARIES="D:/program/Lua/LibLua.lib" -DLIBLUA50_INCLUDE_DIR="D:/program/Lua" -D LIBLUALIB50_INCLUDE_DIR="D:/program/Lua" -DLIBLUALIB50_LIBRARIES="d:/program/Lua/LibLuaLib.lib" -DENABLE_NYZIS=off -DENABLE_QYZIS=off -DCMAKE_VERBOSE_MAKEFILE=on ..

