#MIN_CONFIG

AM_INIT_AUTOMAKE(yzis, M2)

dnl These are common macros that you might or might not want to use

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h stdlib.h paths.h)
AC_CHECK_FUNCS(usleep)
AC_PATH_LUA
AC_CHECK_HEADER(magic.h)
if test "$ac_cv_header_magic_h" = "no"; then
	AC_MSG_ERROR(magic.h not found. Please install libmagic headers.)
fi
AC_CHECK_LIB(magic, magic_open,[have_libmagic=yes],[have_libmagic=no])
if test "$have_libmagic" = "no"; then
	AC_MSG_ERROR(libmagic not found. Please install libmagic.)
fi
AC_CHECK_HEADER(libps/pslib.h)
if test "$ac_cv_header_libps_pslib_h" = "no"; then
	AC_MSG_WARN(libps.h not found. pslib will not be used.)
fi
AC_CHECK_LIB(ps, PS_shutdown,[have_libps=yes],[have_libps=no])
if test "$have_libps" = "no"; then
	AC_MSG_WARN(libps not found. pslib will not be used.)
fi
if test "$have_libps" = "yes" -a "$ac_cv_header_libps_pslib_h" = "yes"; then
	AC_DEFINE(HAVE_LIBPS,1,[whether libps is present or not])
	PS_LIBS="-lps"
fi

AC_CHECK_HEADER(ncurses.h)
if test "$ac_cv_header_ncurses_h" = "no"; then
	AC_MSG_WARN([ncurses.h not found. Please install ncurses5 headers to enable nyzis compilation.])
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
fi
AC_CHECK_LIB(ncurses, curses_version,[have_ncurses=yes],[have_ncurses=no])
if test "$have_ncurses" = "no"; then
	AC_MSG_WARN([libncurses not found or unusable, please make sure you install ncurses5, nyzis compilation will be disabled.])
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
fi

dnl example test : grep have_cppunit_test configure; grep have_lua_test configure
dnl while both tests should return a 'yes' value, the CPPUNIT one does not
dnl I think AC_PROVIDE_IFELSE work with macros but not with FUNCTIONS (one with arguments)
dnl that needs more testing ...
dnl AC_PROVIDE_IFELSE([AM_PATH_CPPUNIT],have_cppunit_test=yes,have_cppunit_test=no)
dnl AC_PROVIDE_IFELSE([AC_PATH_LUA],have_lua_test=yes,have_lua_test=no)

dnl if test "$have_cppunit_test" = "yes"; then
	AM_PATH_CPPUNIT(1.8.0)
dnl fi
AM_CONDITIONAL(HAVE_CPPUNIT, test "$CPPUNIT_LIBS")

KDE_INIT_DOXYGEN([The Yzis API Reference], [Version $VERSION])

AC_ARG_ENABLE(kyzis, AC_HELP_STRING([--disable-kyzis],[disable Kyzis compilation.]),, [enable_kyzis="yes"])
AC_ARG_ENABLE(nyzis, AC_HELP_STRING([--disable-nyzis],[disable Nyzis compilation.]),, [enable_nyzis="yes"])
AC_ARG_WITH(qt4-dir, AC_HELP_STRING([--with-qt4-dir=DIR],[Enable Qt4 support -- EXPERIMENTAL --]),[enable_qt4="yes"; QT_INCLUDES="-I$withval/include/Qt"; QT_LIBS="-L$withval/lib"; QTDIR="$withval"],)

if test "$enable_qt4" != "yes"; then
	YZIS_INCLUDES="$QT_INCLUDES"
	YZIS_SUBDIRS="$YZIS_SUBDIRS libqtyzis"
	NYZIS_DEP="libyzis/libqtyzis/libqtyzis.la"
else
	YZIS_INCLUDES="$QT_INCLUDES"
	YZIS_SUBDIRS="$YZIS_SUBDIRS libqt4yzis"
	NYZIS_DEP="libyzis/libqt4yzis/libqt4yzis.la"
fi

if test "$have_kde" != "yes" -o "$enable_kyzis" != "yes" -o "$enable_qt4" = "yes"; then
	DO_NOT_COMPILE="$DO_NOT_COMPILE kyzis"
fi
if test "$enable_nyzis" != "yes"; then
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
fi

DO_NOT_COMPILE="$DO_NOT_COMPILE tests"

AC_SUBST(YZIS_SUBDIRS)
AC_SUBST(YZIS_INCLUDES)
AC_SUBST(NYZIS_DEP)
AC_SUBST(PS_LIBS)
AC_CONFIG_FILES([ libyzis/translator.h ])

