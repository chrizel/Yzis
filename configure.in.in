#MIN_CONFIG

yzis_version=`cat $srcdir/VERSION`

AM_INIT_AUTOMAKE(yzis, $yzis_version)

dnl These are common macros that you might or might not want to use

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h stdlib.h paths.h)
AC_CHECK_FUNCS(usleep)
dnl KDE_ENABLE_HIDDEN_VISIBILITY
AC_PATH_LUA
AC_CHECK_HEADER(magic.h)
if test "$ac_cv_header_magic_h" = "no"; then
	AC_MSG_ERROR(magic.h not found. Please install libmagic headers.)
fi
AC_CHECK_LIB(magic, magic_open,[have_libmagic=yes],[have_libmagic=no])
if test "$have_libmagic" = "no"; then
	AC_MSG_ERROR(libmagic not found. Please install libmagic.)
fi
AC_ARG_ENABLE(pslib, AC_HELP_STRING([--disable-pslib],[disable Pslib-support.]),, [enable_pslib="no"])
if test "$enable_pslib" == "yes"; then
	AC_CHECK_HEADER(libps/pslib.h)
	if test "$ac_cv_header_libps_pslib_h" = "no"; then
		AC_MSG_WARN(libps.h not found. pslib will not be used.)
	fi
	AC_CHECK_LIB(ps, PS_shutdown,[have_libps=yes],[have_libps=no])
	if test "$have_libps" = "no"; then
		AC_MSG_WARN(libps not found. pslib will not be used.)
	fi
	if test "$have_libps" = "yes" -a "$ac_cv_header_libps_pslib_h" = "yes"; then
		AC_DEFINE(HAVE_LIBPS,1,[whether libps is present or not])
		PS_LIBS="-lps"
	fi
else
	have_libps="no"
fi

yzis_cv_curses=/usr
AC_ARG_WITH(curses, AC_HELP_STRING([--with-curses=DIR],[where ncurses is installed]),
			[if test $withval != yes; then
			 yzis_cv_curses=$withval
		 fi
		 if test x$yzis_cv_curses != x/usr; then
			 LDFLAGS="-L${yzis_cv_curses}/lib $LDFLAGS"
			 CXXFLAGS="-I${yzis_cv_curses}/include $CPPFLAGS"
			 YZIS_INCLUDES="-I${yzis_cv_curses}/include $YZIS_INCLUDES"
		 fi])

cf_ncurses="ncurses"
AC_CHECK_LIB(ncurses, waddnwstr, [have_ncurses="yes"],[have_ncurses="no"])
AC_CHECK_LIB(ncurses, addch, [have_basic_ncurses="yes"],[have_basic_ncurses="no"])
AC_CHECK_LIB(ncursesw, waddnwstr, [have_ncursesw="yes"],[have_ncursesw="no"])

if test "$have_ncurses" = "yes" -o "$have_basic_ncurses" = "yes" ; then
	cf_ncurses="ncurses"
fi
if test "$have_ncursesw" = "yes"; then
	cf_ncurses="ncursesw"
fi

AC_CHECK_LIB($cf_ncurses, initscr,
			 [YZISLIBS="$YZISLIBS -l$cf_ncurses"
			  if test x$yzis_cv_curses = x/usr -a -d /usr/include/ncursesw; then
				  YZIS_INCLUDES="$YZIS_INCLUDES -I/usr/include/ncursesw"
			  else 
				  if test x$yzis_cv_curses = x/usr -a -d /usr/include/ncurses; then
					  YZIS_INCLUDES="$YZIS_INCLUDES -I/usr/include/ncurses"
				  fi
			  fi
			  AC_CHECK_HEADERS(ncurses.h,[cf_cv_ncurses_header="ncurses.h"])
			  AC_CHECK_HEADERS(ncursesw/ncurses.h,[cf_cv_ncurses_header="ncursesw.h"])
			  ], [CF_CURSES_LIBS])
if test "$have_ncurses" = "no" -a "$have_ncursesw" = "no" -a "$have_basic_ncurses" = "yes"; then
	AC_MSG_WARN(WARNING Ncurses libraries with wide characters support not found, nyzis will NOT be compiled. Use a ncurses compiled with unicode support !)
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
else 
	if test "$have_ncurses" = "no" -a "$have_ncursesw" = "no" -a "$have_basic_ncurses" = "no"; then
		AC_MSG_WARN(Ncurses libraries was not found, nyzis will not be compiled.)
		DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
	fi
fi
if test "$cf_cv_ncurses_header" = ""; then
	AC_MSG_WARN(Ncurses header not found, nyzis will not be compiled.)
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
fi

ifdef([AM_PATH_CPPUNIT],
       [AM_PATH_CPPUNIT(1.10.0)],
       )
AM_CONDITIONAL(HAVE_CPPUNIT, test "$CPPUNIT_LIBS")

KDE_INIT_DOXYGEN([The Yzis API Reference], [Version $VERSION])

AC_ARG_ENABLE(kyzis, AC_HELP_STRING([--disable-kyzis],[disable Kyzis compilation.]),, [enable_kyzis="yes"])
AC_ARG_ENABLE(nyzis, AC_HELP_STRING([--disable-nyzis],[disable Nyzis compilation.]),, [enable_nyzis="yes"])
AC_ARG_WITH(qt4-dir, AC_HELP_STRING([--with-qt4-dir=DIR],[Enable Qt4 support -- EXPERIMENTAL --]),[enable_qt4="yes"; QT_INCLUDES="-I$withval/include -I$withval/include/QtCore  -I$withval/include/QtXml -I$withval/include/QtGui"; QT_LIBS="-L$withval/lib"; QTDIR="$withval"],)

if test "$enable_qt4" != "yes"; then
	YZIS_QT3="libqtyzis"
	NYZIS_DEP="libyzis/libqtyzis/libqtyzis.la"
	YZIS_INCLUDES="$YZIS_INCLUDES $all_includes"
else
	YZIS_QT4="libqt4yzis"
	NYZIS_DEP="libyzis/libqt4yzis/libqt4yzis.la"
	YZIS_INCLUDES="$QT_INCLUDES $YZIS_INCLUDES"
	MOC="$QTDIR/bin/moc"
	AC_SUBST(MOC)
fi
AM_CONDITIONAL(use_libqt, test -n "$YZIS_QT3")
AM_CONDITIONAL(use_libqt4, test -n "$YZIS_QT4")


if test "$have_kde" != "yes" -o "$enable_kyzis" != "yes" -o "$enable_qt4" = "yes"; then
	DO_NOT_COMPILE="$DO_NOT_COMPILE kyzis kqcommon"
fi
if test "$enable_nyzis" != "yes"; then
	DO_NOT_COMPILE="$DO_NOT_COMPILE nyzis"
fi

DO_NOT_COMPILE="$DO_NOT_COMPILE tests gyzis"

AC_SUBST(YZIS_QT3)
AC_SUBST(YZIS_QT4)
AC_SUBST(YZIS_INCLUDES)
AC_SUBST(NYZIS_DEP)
AC_SUBST(PS_LIBS)
AC_SUBST(YZISLIBS)
AC_SUBST(QT_LIBS)
AC_CONFIG_FILES( [ libyzis/translator.h ] )

