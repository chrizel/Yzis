
/** \page building_yzis How to build Yzis

\section tools Essential Tools

To build yzis from source code You'll need to install the following packages:
- subversion for fetching the code
- cmake, for building
- qt, for libyzis and QYzis
- KDE, for KYzis
- ncurses, for NYzis
- doxygen, for the documentation
- latex, if you want the documentation in pdf


\section get_the_source Get the source

The source code of Yzis and its documentation is managed using subversion.

On linux, you need the basic subversion client and then type:
\verbatim
svn co svn://svn.freenux.org/yzis/trunk yzis
\endverbatim

On windows, get <a href="http://tortoisesvn.tigris.org">Tortoise SVN</a> and
use the following url for your checkout:
\verbatim
svn://svn.freenux.org/yzis/trunk
\endverbatim


\section kubuntu_tools Installing tools for (K)ubuntu 6.10 (Edgy Eft)

First of all, if you haven't already done so, you have to add the
\e universe repository by uncommenting the appropriate lines in
/etc/apt/sources.list . This is needed to install cmake.

You need to install the the following packages and their dependencies using apt-get:
\verbatim
sudo apt-get install subversion cmake build-essential libqt4-dev liblua5.1-0-dev libncursesw5-dev libmagic-dev doxygen
\endverbatim

If you want the pdf documentation, you need LaTeX as well:
\verbatim
sudo apt-get install texlive-base texlive-base-bin texlive-doc-base texlive-fonts-recommended texlive-latex-base texlive-latex-recommended texlive-pdfetex texlive-latex-extra
\endverbatim


\section gentoo_tools Installing tools for Gentoo 
There are two ways for installing the latest yzis version on your system.

\subsection gentoo_ebuild Gentoo Ebuild

You can download the yzis ebuild from the Gentoo bug database:
<a href="http://bugs.gentoo.org/show_bug.cgi?id=48552">yzis ebuild</a>

Installing this ebuild (and updating the date in the ebuild's name) you will
always have the newest yzis development snapshot installed.

If you need instructions on installing custom ebuilds, please refer to:

http://linuxreviews.org/gentoo/ebuilds/ or
http://gentoo-wiki.com/HOWTO_Installing_3rd_Party_Ebuilds

The ebuild will check for the necessary dependencies, except for subversion. 

\subsubsection gentoo_sources Building on Gentoo

You can also check out the sources directly from the yzis svn repository and
compile them on your own.

If you need to install any missing tool (e.g. subversion) you can do as follows:
\verbatim
emerge -av subversion
\endverbatim

It is also advisable to have a subversion client installed, e.g kdesvn, esvn, etc. for easier handling of the subversion repository and sandbox.

It can happen that some required tool versions are masked in portage. In this case you can unmask them  with the following command:

\verbatim
echo <category>/<package>-<version> >> /etc/portage/package.keywords
\endverbatim


For LaTeX:
emerge -av tetex

For Doxygen
emerge -av doxygen


\section windows_tools Installing tools on Windows

On windows, you will need to download and install a few packages.

- Qt:
See http://www.trolltech.com/developer/downloads/qt/windows 

The installer will ask you if you have mingw installed and whether it should
download it. If you don't have mingw, just say yes and the Qt installer will
take care of everything.

After the installation, you need to compile the Qt library in debug mode.
Open:
Start -> All Programs -> Qt by Trolltech (Open Source Edition) -> Qt 4.2.2 (Build debug libraries)

You will also need to compile QtTest, which is not compiled by default.
Open:
Start -> All Programs -> Qt by Trolltech (Open Source Edition) -> Qt 4.2.2
Command line

And then, in the DOS window, type:
\verbatim
cd tools
cd qtestlib
make
\endverbatim

- Lua

You can get lua binaries from:
http://luaforge.net/frs/?group_id=110

You need:
- lua5_1_1_Win32_mingw3_lib.zip
- lua5_1_1_Win32_bin.zip

Unzip them in a directory

- CMake

Download the latest windows version from http://cmake.org/HTML/Download.html

\section building Building Yzis (any platform)

Yzis uses CMake for managing the build.

To get started, create a directory \e build, enter it and run cmake:
\verbatim
mkdir build
cd build
cmake ..
\endverbatim

CMake will start to look for the dependencies. Depending on the packages it
finds, it will enable or disable some modules. After that, it will generate Makefiles.

You can pass options and variables to CMAKE with the -D flag:
cmake -DENABLE_NYZIS=off to disable for example the nyzis building.

This list of available options are:
- ENABLE_NYZIS: build the ncurses based frontend. Default is ON when ncurses
  is found. 
- ENABLE_QYZIS: build the Qt frontend. Default is ON on linux when Qt is
  found, and OFF on windows (until I can make it compile on windows).
- ENABLE_LIBYZISRUNNER: build the frontend used to test the library. Default
  is ON.
- CMAKE_VERBOSE_MAKEFILE: default is OFF, allows to see the exact
  compilation lines. Very useful when something does not work, to understand
  what cmake is actually doing. You can still get verbose output by typing
VERBOSE=1 make
when executing make.
- ENABLE_DOCUMENTATION: generate the documentation when building (doxygen
  needed), default OFF
- ENABLE_TESTS: generate an executable to run the unit tests, default is ON.

You can choose between debug or release configuration with:
-DCMAKE_BUILD_TYPE=Debug
or
-DCMAKE_BUILD_TYPE=Release

For Qt, you need to have the QTDIR environment variable pointing to Qt,
so that CMake finds it.

For Lua, you need to have it installed in /usr/lib or /usr/local/lib, or to
specify it with the following CMake variables:
- LIBLUA50_INCLUDE_DIR: place to find lua.h
- LIBLUA50_LIBRARIES: place to find liblua.so
You can specify the lua install prefix insteed with the CMake variable
WITH_LUA_HOME

Please note: Lua 5.1 support is broken at the moment. You have to use 
lua 5.0

\subsection windows_notes Special Notes on windows:

On windows, the compiler must be mingw. When you install Qt 4 for windows, Qt
proposed to download and install mingw automatically.

When using cmake, you need to specify the generator as mingw, else CMake will
try to generate projects for Visual C++:
\verbatim
cmake -G "MinGW Makefiles" .. 
\endverbatim

You will probably need to specify the lua libraries explicitely. My build
line on windows look like this:

\verbatim
cmake -G "MinGW Makefiles" -DLIBLUA50_LIBRARIES="D:/program/Lua/LibLua.lib" 
-DLIBLUA51_INCLUDE_DIR="D:/program/Lua" 
-DENABLE_NYZIS=off 
-DENABLE_QYZIS=on 
-DCMAKE_VERBOSE_MAKEFILE=off 
-DCMAKE_BUILD_TYPE=Debug ..
\endverbatim

*/

