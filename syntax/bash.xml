<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
	<!ENTITY funcname "[A-Za-z_:][A-Za-z0-9_:#&#37;@-]*">
]>
<language name="Bash" version="1.99" kateversion="2.2" section="Scripts" extensions="*.sh;*.bash;*.ebuild;*.eclass" mimetype="application/x-shellscript" casesensitive="1" author="Wilbert Berendsen (wilbert@kde.nl)" license="LGPL">

<!-- (c) 2004 by Wilbert Berendsen, wilbert@kde.nl
    Released under the LGPL, part of kdelibs/kate -->

  <highlighting>
    <list name="keywords">
      <item> else </item>
      <item> for </item>
      <item> function </item>
      <item> in </item>
      <item> select </item>
      <item> until </item>
      <item> while </item>
      <item> . </item>
      <item> elif </item>
      <item> then </item>
      <item> set </item>
    </list>

    <list name="builtins">
      <item> : </item>
      <item> . </item>
      <item> source </item>
      <item> alias </item>
      <item> bg </item>
      <item> bind </item>
      <item> break </item>
      <item> builtin </item>
      <item> cd </item>
      <item> command </item>
      <item> compgen </item>
      <item> complete </item>
      <item> continue </item>
      <item> dirs </item>
      <item> disown </item>
      <item> echo </item>
      <item> enable </item>
      <item> eval </item>
      <item> exec </item>
      <item> exit </item>
      <item> fc </item>
      <item> fg </item>
      <item> getopts </item>
      <item> hash </item>
      <item> help </item>
      <item> history </item>
      <item> jobs </item>
      <item> kill </item>
      <item> let </item>
      <item> logout </item>
      <item> popd </item>
      <item> printf </item>
      <item> pushd </item>
      <item> pwd </item>
      <item> return </item>
      <item> set </item>
      <item> shift </item>
      <item> shopt </item>
      <item> suspend </item>
      <item> test </item>
      <item> times </item>
      <item> trap </item>
      <item> type </item>
      <item> ulimit </item>
      <item> umask </item>
      <item> unalias </item>
      <item> wait </item>
    </list>
    
    <list name="builtins_var">
      <item> export </item>
      <item> unset </item>
      <item> declare </item>
      <item> typeset </item>
      <item> local </item>
      <item> read </item>
      <item> readonly </item>
    </list>
    
    <list name="unixcommands">
      <!-- /bin -->
      <item> arch </item>
      <item> awk </item>
      <item> bash </item>
      <item> bunzip2 </item>
      <item> bzcat </item>
      <item> bzcmp </item>
      <item> bzdiff </item>
      <item> bzegrep </item>
      <item> bzfgrep </item>
      <item> bzgrep </item>
      <item> bzip2 </item>
      <item> bzip2recover </item>
      <item> bzless </item>
      <item> bzmore </item>
      <item> cat </item>
      <item> chattr </item>
      <item> chgrp </item>
      <item> chmod </item>
      <item> chown </item>
      <item> chvt </item>
      <item> cp </item>
      <item> date </item>
      <item> dd </item>
      <item> deallocvt </item>
      <item> df </item>
      <item> dir </item>
      <item> dircolors </item>
      <item> dmesg </item>
      <item> dnsdomainname </item>
      <item> domainname </item>
      <item> du </item>
      <item> dumpkeys </item>
      <item> echo </item>
      <item> ed </item>
      <item> egrep </item>
      <item> false </item>
      <item> fgconsole </item>
      <item> fgrep </item>
      <item> fuser </item>
      <item> gawk </item>
      <item> getkeycodes </item>
      <item> gocr </item>
      <item> grep </item>
      <item> groups </item>
      <item> gunzip </item>
      <item> gzexe </item>
      <item> gzip </item>
      <item> hostname </item>
      <item> igawk </item>
      <item> install </item>
      <item> kbd_mode </item>
      <item> kbdrate </item>
      <item> killall </item>
      <item> last </item>
      <item> lastb </item>
      <item> link </item>
      <item> ln </item>
      <item> loadkeys </item>
      <item> loadunimap </item>
      <item> login </item>
      <item> ls </item>
      <item> lsattr </item>
      <item> lsmod </item>
      <item> lsmod.old </item>
      <item> mapscrn </item>
      <item> mesg </item>
      <item> mkdir </item>
      <item> mkfifo </item>
      <item> mknod </item>
      <item> mktemp </item>
      <item> more </item>
      <item> mount </item>
      <item> mv </item>
      <item> nano </item>
      <item> netstat </item>
      <item> nisdomainname </item>
      <item> openvt </item>
      <item> pgawk </item>
      <item> pidof </item>
      <item> ping </item>
      <item> ps </item>
      <item> pstree </item>
      <item> pwd </item>
      <item> rbash </item>
      <item> readlink </item>
      <item> red </item>
      <item> resizecons </item>
      <item> rm </item>
      <item> rmdir </item>
      <item> run-parts </item>
      <item> sash </item>
      <item> sed </item>
      <item> setfont </item>
      <item> setkeycodes </item>
      <item> setleds </item>
      <item> setmetamode </item>
      <item> setserial </item>
      <item> sh </item>
      <item> showkey </item>
      <item> shred </item>
      <item> sleep </item>
      <item> ssed </item>
      <item> stat </item>
      <item> stty </item>
      <item> su </item>
      <item> sync </item>
      <item> tar </item>
      <item> tempfile </item>
      <item> touch </item>
      <item> true </item>
      <item> umount </item>
      <item> uname </item>
      <item> unicode_start </item>
      <item> unicode_stop </item>
      <item> unlink </item>
      <item> utmpdump </item>
      <item> uuidgen </item>
      <item> vdir </item>
      <item> wall </item>
      <item> wc </item>
      <item> ypdomainname </item>
      <item> zcat </item>
      <item> zcmp </item>
      <item> zdiff </item>
      <item> zegrep </item>
      <item> zfgrep </item>
      <item> zforce </item>
      <item> zgrep </item>
      <item> zless </item>
      <item> zmore </item>
      <item> znew </item>
      <item> zsh </item>

      <!-- some from /usr/bin -->
      <item> aclocal </item>
      <item> aconnect </item>
      <item> aplay </item>
      <item> apm </item>
      <item> apmsleep </item>
      <item> apropos </item>
      <item> ar </item>
      <item> arecord </item>
      <item> as </item>
      <item> as86 </item>
      <item> autoconf </item>
      <item> autoheader </item>
      <item> automake </item>
      <item> awk </item>
      <item> basename </item>
      <item> bc </item>
      <item> bison </item>
      <item> c++ </item>
      <item> cal </item>
      <item> cat </item>
      <item> cc </item>
      <item> cdda2wav </item>
      <item> cdparanoia </item>
      <item> cdrdao </item>
      <item> cd-read </item>
      <item> cdrecord </item>
      <item> chfn </item>
      <item> chgrp </item>
      <item> chmod </item>
      <item> chown </item>
      <item> chroot </item>
      <item> chsh </item>
      <item> clear </item>
      <item> cmp </item>
      <item> co </item>
      <item> col </item>
      <item> comm </item>
      <item> cp </item>
      <item> cpio </item>
      <item> cpp </item>
      <item> cut </item>
      <item> dc </item>
      <item> dd </item>
      <item> df </item>
      <item> diff </item>
      <item> diff3 </item>
      <item> dir </item>
      <item> dircolors </item>
      <item> directomatic </item>
      <item> dirname </item>
      <item> du </item>
      <item> env </item>
      <item> expr </item>
      <item> fbset </item>
      <item> file </item>
      <item> find </item>
      <item> flex </item>
      <item> flex++ </item>
      <item> fmt </item>
      <item> free </item>
      <item> ftp </item>
      <item> funzip </item>
      <item> fuser </item>
      <item> g++ </item>
      <item> gawk </item>
      <item> gc </item>
      <item> gcc </item>
      <item> gdb </item>
      <item> getent </item>
      <item> getopt </item>
      <item> gettext </item>
      <item> gettextize </item>
      <item> gimp </item>
      <item> gimp-remote </item>
      <item> gimptool </item>
      <item> gmake </item>
      <item> gs </item>
      <item> head </item>
      <item> hexdump </item>
      <item> id </item>
      <item> install </item>
      <item> join </item>
      <item> kill </item>
      <item> killall </item>
      <item> ld </item>
      <item> ld86 </item>
      <item> ldd </item>
      <item> less </item>
      <item> lex </item>
      <item> ln </item>
      <item> locate </item>
      <item> lockfile </item>
      <item> logname </item>
      <item> lp </item>
      <item> lpr </item>
      <item> ls </item>
      <item> lynx </item>
      <item> m4 </item>
      <item> make </item>
      <item> man </item>
      <item> mkdir </item>
      <item> mknod </item>
      <item> msgfmt </item>
      <item> mv </item>
      <item> namei </item>
      <item> nasm </item>
      <item> nawk </item>
      <item> nice </item>
      <item> nl </item>
      <item> nm </item>
      <item> nm86 </item>
      <item> nmap </item>
      <item> nohup </item>
      <item> nop </item>
      <item> od </item>
      <item> passwd </item>
      <item> patch </item>
      <item> pcregrep </item>
      <item> pcretest </item>
      <item> perl </item>
      <item> perror </item>
      <item> pidof </item>
      <item> pr </item>
      <item> printf </item>
      <item> procmail </item>
      <item> prune </item>
      <item> ps2ascii </item>
      <item> ps2epsi </item>
      <item> ps2frag </item>
      <item> ps2pdf </item>
      <item> ps2ps </item>
      <item> psbook </item>
      <item> psmerge </item>
      <item> psnup </item>
      <item> psresize </item>
      <item> psselect </item>
      <item> pstops </item>
      <item> rcs </item>
      <item> rev </item>
      <item> rm </item>
      <item> scp </item>
      <item> sed </item>
      <item> seq </item>
      <item> setterm </item>
      <item> shred </item>
      <item> size </item>
      <item> size86 </item>
      <item> skill </item>
      <item> slogin </item>
      <item> snice </item>
      <item> sort </item>
      <item> sox </item>
      <item> split </item>
      <item> ssh </item>
      <item> ssh-add </item>
      <item> ssh-agent </item>
      <item> ssh-keygen </item>
      <item> ssh-keyscan </item>
      <item> stat </item>
      <item> strings </item>
      <item> strip </item>
      <item> sudo </item>
      <item> suidperl </item>
      <item> sum </item>
      <item> tac </item>
      <item> tail </item>
      <item> tee </item>
      <item> test </item>
      <item> tr </item>
      <item> uniq </item>
      <item> unlink </item>
      <item> unzip </item>
      <item> updatedb </item>
      <item> updmap </item>
      <item> uptime </item>
      <item> users </item>
      <item> vmstat </item>
      <item> w </item>
      <item> wc </item>
      <item> wget </item>
      <item> whatis </item>
      <item> whereis </item>
      <item> which </item>
      <item> who </item>
      <item> whoami </item>
      <item> write </item>
      <item> xargs </item>
      <item> yacc </item>
      <item> yes </item>
      <item> zip </item>
      <item> zsoelim </item>
      
      <!-- others -->
      <item> dcop </item>
      <item> kdialog </item>
      <item> kfile </item>
      <item> xhost </item>
    </list>

            
    <contexts>
      <context attribute="Normal Text" lineEndContext="#stay" name="Start">
      	<IncludeRules context="FindAll" />
      </context>

<!-- ====== The following rulessets are meant to be included ======== -->
      <!-- FindAll tries to interpret everything -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindAll">
      	<IncludeRules context="FindComments" />
      	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- FindMost tries to interpret anything except commands -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindMost">
      	<IncludeRules context="FindComments" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      
      <!-- FindComments consumes shell comments till EOL -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindComments">
      	<RegExpr attribute="Comment" context="Comment" String="^#" />
	<RegExpr attribute="Normal Text" context="Comment" String="(^\s+|[\s;])(?=#)" />
      </context>
      
      <!-- FindCommentsParen consumes shell comments till EOL or a closing parenthese -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindCommentsParen">
      	<RegExpr attribute="Comment" context="CommentParen" String="^#" />
	<RegExpr attribute="Normal Text" context="CommentParen" String="(^\s+|[\s;])(?=#)" />
      </context>
      
      <!-- FindCommentsBackq consumes shell comments till EOL or a backquote -->
      <context attribute="Normal Text" lineEndContext="#pop" name="FindCommentsBackq">
      	<RegExpr attribute="Comment" context="CommentBackq" String="^#" />
	<RegExpr attribute="Normal Text" context="CommentBackq" String="(^\s+|[\s;])(?=#)" />
      </context>
      
      
      <!-- FindCommands matches many items that can be expected outside strings, substitutions etc. -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindCommands">
      	<!-- start expression in double parentheses -->
      	<Detect2Chars attribute="Keyword" context="ExprDblParen" char="(" char1="(" beginRegion="expression" />
	<!-- start expression in double brackets -->
	<RegExpr attribute="Keyword" context="ExprDblBracket" String="^\[\[(?=($|\s))" beginRegion="expression" />
	<RegExpr attribute="Keyword" context="ExprDblBracket" String="\s\[\[(?=($|\s))" beginRegion="expression" />
	<!-- start expression in single brackets -->
	<RegExpr attribute="Builtin" context="ExprBracket" String="^\[(?=($|\s))" beginRegion="expression" />
	<RegExpr attribute="Builtin" context="ExprBracket" String="\s\[(?=($|\s))" beginRegion="expression" />
	<!-- start a group command with { -->
	<RegExpr attribute="Keyword" context="Group" String="\{(?=(\s|$))" beginRegion="group" />
      	<!-- start a subshell -->
	<DetectChar attribute="Keyword" context="SubShell" char="(" beginRegion="subshell" />
	<!-- match do and if blocks -->
	<RegExpr attribute="Keyword" context="#stay" String="\bdo(?![\w$+-])" beginRegion="do" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bdone(?![\w$+-])" endRegion="do" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bif(?![\w$+-])" beginRegion="if" />
      	<RegExpr attribute="Keyword" context="#stay" String="\bfi(?![\w$+-])" endRegion="if" />
      	<!-- handle case as a special case -->
	<RegExpr attribute="Keyword" context="Case" String="\bcase(?![\w$+-])"
		beginRegion="case" />
	<!-- handle command line options -->
	<RegExpr attribute="Option" context="#stay" String="-[A-Za-z0-9]+" />
	<RegExpr attribute="Option" context="#stay" String="--[a-z][A-Za-z0-9_-]*" />
	<!-- handle variable assignments -->
	<RegExpr attribute="Variable" context="Assign" String="\b[A-Za-z_][A-Za-z0-9_]*=" />
	<RegExpr attribute="Variable" context="AssignSubscr" String="\b[A-Za-z_][A-Za-z0-9_]*(?=\[[^]]+\]=)" />
	<!-- handle functions with function keyword before keywords -->
	<StringDetect attribute="Function" context="#stay" String=":()" />
	<RegExpr attribute="Keyword" context="FunctionDef" String="\bfunction\b" />
	<!-- handle keywords -->
	<keyword attribute="Keyword" context="#stay" String="keywords" />
	<keyword attribute="Builtin" context="#stay" String="builtins" />
        <keyword attribute="Command" context="#stay" String="unixcommands" />
	<!-- handle commands that have variable names as argument -->
	<keyword attribute="Builtin" context="VarName" String="builtins_var" />
	<!-- handle &, &&, | and || -->
	<RegExpr attribute="Control" context="#stay" String="([|&amp;])\1?" />
        <!-- handle here-string -->
	<StringDetect attribute="Redirection" context="#stay" String="&lt;&lt;&lt;" />
	<!-- handle here document -->
	<StringDetect attribute="Redirection" context="HereDoc" String="&lt;&lt;" />
        <!-- handle process subst -->
        <RegExpr attribute="Redirection" context="ProcessSubst" String="[&lt;&gt;]\(" />
        <!-- handle redirection -->
        <RegExpr attribute="Redirection" context="#stay" String="([0-9]*(&gt;{1,2}|&lt;)(&amp;[0-9]+-?)?|&amp;&gt;|&gt;&amp;|[0-9]*&lt;&gt;)" />
	<!-- mark function definitions without function keyword -->
        <RegExpr attribute="Function" context="#stay" String="&funcname;\s*\(\)" />
      </context>

      <!-- FindOthers contains various rules to mark different shell input -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindOthers">
	<RegExpr attribute="Escape" context="#stay" String="\\[][;&quot;\\'$`{}()|&amp;&lt;&gt;* ]" />
	<RegExpr attribute="Keyword" context="#stay" String="\\$" />
	<RegExpr attribute="Escape" context="#stay" String="\{(?!(\s|$))\S*\}" />
        <RegExpr attribute="Path" context="#stay" String="\.?/[\w_@.+-]+(?=([\s/):]|$))" />
	<!-- TODO: shell globs -->
      </context>
      
      <!-- FindStrings looks for single and double quoted strings, also with $-prefix -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindStrings">
	<DetectChar attribute="String SingleQ" context="StringSQ" char="'" />
	<DetectChar attribute="String DoubleQ" context="StringDQ" char="&quot;" />
	<Detect2Chars attribute="String SingleQ" context="StringEsc" char="$" char1="'" />
	<Detect2Chars attribute="String Transl." context="StringDQ" char="$" char1="&quot;" />
      </context>
            
      <!-- FindSubstitutions goes after anything starting with $ -->
      <context attribute="Normal Text" lineEndContext="#stay" name="FindSubstitutions">
	<RegExpr attribute="Variable" context="#stay" String="\$[*@#?$!_0-9-]" />
	<RegExpr attribute="Variable" context="Subscript" String="\$[A-Za-z_][A-Za-z0-9_]*\[" />
	<RegExpr attribute="Variable" context="#stay" String="\$[A-Za-z_][A-Za-z0-9_]*" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{[*@#?$!_0-9-]\}" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{#[A-Za-z_][A-Za-z0-9_]*\}" />
	<RegExpr attribute="Variable" context="#stay" String="\$\{![A-Za-z_][A-Za-z0-9_]*\*?\}" />
	<RegExpr attribute="Variable" context="VarBrace" String="\$\{[A-Za-z_][A-Za-z0-9_]*" />
	<RegExpr attribute="Variable" context="VarBrace" String="\$\{[*@#?$!_0-9-](?=[:#%/])" />
	<StringDetect attribute="Variable" context="ExprDblParenSubst" String="$((" beginRegion="expression" />
	<StringDetect attribute="Redirection" context="SubstFile" String="$(&lt;" />
        <StringDetect attribute="Variable" context="SubstCommand" String="$(" />
	<DetectChar attribute="Backquote" context="SubstBackq" char="`" />
      </context>

      
      

      
<!-- ====== These are the contexts that can be branched to ======= -->
      <!-- Comment consumes anything till EOL, marks Comment -->
      <context attribute="Comment" lineEndContext="#pop" name="Comment" />
      
      <!-- CommentParen consumes anything till closing parenthese or EOL, marks Comment -->
      <context attribute="Comment" lineEndContext="#pop" name="CommentParen">
      	<RegExpr attribute="Comment" context="#pop" String="[^)](?=\))" />
      </context>

      <!-- CommentBackq consumes anything till backquote or EOL, marks Comment -->
      <context attribute="Comment" lineEndContext="#pop" name="CommentBackq">
      	<RegExpr attribute="Comment" context="#pop" String="[^`](?=`)" />
      </context>


      <!-- ExprDblParen consumes an expression started in command mode till )) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblParen">
      	<Detect2Chars attribute="Keyword" context="#pop" char=")" char1=")" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>
      
      <!-- ExprDblParenSubst like ExprDblParen but matches )) as Variable -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblParenSubst">
      	<Detect2Chars attribute="Variable" context="#pop" char=")" char1=")" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprSubParen consumes an expression till ) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprSubParen">
      	<DetectChar attribute="Normal Text" context="#pop" char=")" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprBracket consumes an expression till ] -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprBracket">
      	<RegExpr attribute="Builtin" context="#pop" String="\s\](?=($|[\s;|&amp;]))" endRegion="expression" />
      	<RegExpr attribute="Builtin" context="#pop" String="^\](?=($|[\s;|&amp;]))" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- ExprDblBracket consumes an expression till ]] -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ExprDblBracket">
      	<RegExpr attribute="Keyword" context="#pop" String="\s\]\](?=($|[\s;|&amp;]))" endRegion="expression" />
      	<RegExpr attribute="Keyword" context="#pop" String="^\]\](?=($|[\s;|&amp;]))" endRegion="expression" />
	<DetectChar attribute="Normal Text" context="ExprSubParen" char="(" />
	<IncludeRules context="FindMost" />
      </context>

      <!-- Group consumes shell input till } -->
      <context attribute="Normal Text" lineEndContext="#stay" name="Group">
	<DetectChar attribute="Keyword" context="#pop" char="}" endRegion="group" />
      	<IncludeRules context="FindAll" />
      </context>      

      <!-- SubShell consumes shell input till ) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubShell">
	<DetectChar attribute="Keyword" context="#pop" char=")" endRegion="subshell" />
      	<IncludeRules context="FindAll" />
      </context>      

      <!-- Assign consumes an expression till EOL or whitespace -->
      <context attribute="Normal Text" lineEndContext="#pop" name="Assign" fallthrough="true" fallthroughContext="#pop">
      	<DetectChar attribute="Variable" context="AssignArray" char="(" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- AssignArray consumes everything till ), marking assignments -->
      <context attribute="Normal Text" lineEndContext="#pop" name="AssignArray">
      	<DetectChar attribute="Variable" context="#pop" char=")" />
	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindMost" />
      </context>
      
      <!-- AssignSubscr first expects a [ then parses subscript and continues with '=value' -->
      <context attribute="Normal Text" lineEndContext="#pop" name="AssignSubscr" fallthrough="true" fallthroughContext="#pop">
      	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- Subscript consumes anything till ], marks as Variable -->
      <context attribute="Variable" lineEndContext="#stay" name="Subscript">
      	<DetectChar attribute="Variable" context="#pop" char="]" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- FunctionDef consumes a name, possibly with (), marks as Function -->
      <context attribute="Function" lineEndContext="#pop" name="FunctionDef" fallthrough="true" fallthroughContext="#pop">
      	<RegExpr attribute="Function" context="#pop" String="\s+&funcname;(\s*\(\))?" />
      </context>            
      
      <!-- VarName consumes spare variable names and assignments -->
      <context attribute="Normal Text" lineEndContext="#pop" name="VarName" fallthrough="true" fallthroughContext="#pop">
	<!-- handle command line options -->
	<RegExpr attribute="Option" context="#stay" String="-[A-Za-z0-9]+" />
	<RegExpr attribute="Option" context="#stay" String="--[a-z][A-Za-z0-9_-]*" />
	<RegExpr attribute="Variable" context="#stay" String="\b[A-Za-z_][A-Za-z0-9_]*" />
	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<DetectChar attribute="Variable" context="Assign" char="=" />
	<IncludeRules context="FindMost" />
	<!-- stay here in spaces and other safe characters -->
	<RegExpr attribute="Normal Text" context="#stay" String="[^;&amp;&gt;&lt;|]" />
      </context>

      <!-- ProcessSubst handles <(command) and >(command) -->
      <context attribute="Normal Text" lineEndContext="#stay" name="ProcessSubst">
      	<DetectChar attribute="Redirection" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- StringSQ consumes anything till ' -->            
      <context attribute="String SingleQ" lineEndContext="#stay" name="StringSQ">
      	<DetectChar attribute="String SingleQ" context="#pop" char="'" />
      </context>

      <!-- StringDQ consumes anything till ", substitutes vars and expressions -->
      <context attribute="String DoubleQ" lineEndContext="#stay" name="StringDQ">
      	<DetectChar attribute="String DoubleQ" context="#pop" char="&quot;" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\[`&quot;\\$\n]" />
	<IncludeRules context="FindSubstitutions" />
      </context>
      
      <!-- StringEsc eats till ', but escaping many characters -->
      <context attribute="String SingleQ" lineEndContext="#stay" name="StringEsc">
      	<DetectChar attribute="String SingleQ" context="#pop" char="'" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\[abefnrtv\\']" />
      	<RegExpr attribute="String Escape" context="#stay" String="\\([0-7]{1,3}|x[A-Fa-f0-9]{1,2}|c.)" />
      </context>

      <!-- VarBrace is called as soon as ${xxx is encoutered -->
      <context attribute="Variable" lineEndContext="#stay" name="VarBrace">
        <DetectChar attribute="Variable" context="#pop" char="}" />
      	<DetectChar attribute="Variable" context="Subscript" char="[" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />
	<!-- TODO: highlight various special parameter expansions } -->
      </context>
      
      <!-- SubstFile is called after a <( or >( is encoutered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstFile">
      	<DetectChar attribute="Redirection" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- SubstCommand is called after a $( is encountered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstCommand">
      	<DetectChar attribute="Variable" context="#pop" char=")" />
	<IncludeRules context="FindCommentsParen" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>
      
      <!-- SubstBackq is called when a backquote is encountered -->
      <context attribute="Normal Text" lineEndContext="#stay" name="SubstBackq">
      	<DetectChar attribute="Keyword" context="#pop" char="`" />
	<IncludeRules context="FindCommentsBackq" />
	<IncludeRules context="FindCommands" />
	<IncludeRules context="FindStrings" />
	<IncludeRules context="FindSubstitutions" />      
	<IncludeRules context="FindOthers" />
      </context>

      <!-- Case is called after the case keyword is encoutered. We handle this because of
           the lonely closing parentheses that would otherwise disturb the expr matching -->
      <context attribute="Normal Text" lineEndContext="#stay" name="Case">
        <RegExpr attribute="Keyword" context="CaseIn" String="\sin\b" />
        <IncludeRules context="FindMost" />
      </context>

      <!-- CaseIn is called when the construct 'case ... in' has been found. -->
      <context attribute="Normal Text" lineEndContext="#stay" name="CaseIn">
        <RegExpr attribute="Keyword" context="#pop#pop" String="\besac(?=$|[\s;)])" endRegion="case" />
      	<DetectChar attribute="Keyword" context="CaseExpr" char=")" beginRegion="caseexpr" />
	<AnyChar attribute="Keyword" context="#stay" String="(|" />
        <IncludeRules context="FindMost" />
      </context>

      <!-- CaseExpr eats shell input till ;; -->
      <context attribute="Normal Text" lineEndContext="#stay" name="CaseExpr">
        <StringDetect attribute="Keyword" context="#pop" String=";;" endRegion="caseexpr" />
	<IncludeRules context="FindAll" />
      </context>

      <!-- HereDoc consumes Here-documents.
      
      This is difficult to do because one can't make Kate remember the string used as delimiter.
      So we support EOF, and the combination _{0,2}E[ON][A-Z_]+ .
      We support also indented or not, and quoted or not.  More can be added if so desired.
      
      If the delimiters are not matched, the text will be interpreted as shell code, which may
      look odd if there are unbalanced quotes in it.
       
       -->
      <context attribute="Normal Text" lineEndContext="#stay" name="HereDoc" fallthrough="true" fallthroughContext="#pop">
	<RegExpr attribute="Redirection" context="HDocEOF"    String="\s*EOF\b" />
        <RegExpr attribute="Redirection" context="HDocEOF Q"  String="\s*([&quot;'])EOF\1" />
        <RegExpr attribute="Redirection" context="HDocEOF I"  String="-\s*EOF\b" />
        <RegExpr attribute="Redirection" context="HDocEOF IQ" String="-\s*([&quot;'])EOF\1" />

	<RegExpr attribute="Redirection" context="HDocOTH"    String="\s*_{0,2}E[ON][A-Z_]+\b" />
        <RegExpr attribute="Redirection" context="HDocOTH Q"  String="\s*([&quot;'])_{0,2}E[ON][A-Z_]+\1" />
        <RegExpr attribute="Redirection" context="HDocOTH I"  String="-\s*_{0,2}E[ON][A-Z_]+\b" />
        <RegExpr attribute="Redirection" context="HDocOTH IQ" String="-\s*([&quot;'])_{0,2}E[ON][A-Z_]+\1" />

	<DetectChar attribute="Redirection" context="#pop" char="-" />
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="HDocSub">
      	<RegExpr attribute="Normal Text" context="#stay" String="\\[$`\\]" />
      	<IncludeRules context="FindSubstitutions" />
      </context>
      
      <context attribute="Normal Text" lineEndContext="HDocEOF 2 "  name="HDocEOF"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocEOF Q2"  name="HDocEOF Q"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocEOF I2"  name="HDocEOF I"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocEOF IQ2" name="HDocEOF IQ"><IncludeRules context="FindAll" /></context>
      
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocEOF 2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^EOF(?=\s*($|\)))" />
	<IncludeRules context="HDocSub" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocEOF Q2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^EOF(?=\s*($|\)))" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocEOF I2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^\s*EOF(?=\s*($|\)))" />
	<IncludeRules context="HDocSub" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocEOF IQ2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^\s*EOF(?=\s*($|\)))" /></context>
    
      <context attribute="Normal Text" lineEndContext="HDocOTH 2 "  name="HDocOTH"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocOTH Q2"  name="HDocOTH Q"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocOTH I2"  name="HDocOTH I"><IncludeRules context="FindAll" /></context>
      <context attribute="Normal Text" lineEndContext="HDocOTH IQ2" name="HDocOTH IQ"><IncludeRules context="FindAll" /></context>
      
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocOTH 2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^_{0,2}E[ON][A-Z_]+(?=\s*($|\)))" />
	<IncludeRules context="HDocSub" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocOTH Q2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^_{0,2}E[ON][A-Z_]+(?=\s*($|\)))" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocOTH I2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^\s*_{0,2}E[ON][A-Z_]+(?=\s*($|\)))" />
	<IncludeRules context="HDocSub" /></context>
      <context attribute="Normal Text" lineEndContext="#stay" name="HDocOTH IQ2">
        <RegExpr attribute="Redirection" context="#pop#pop#pop" String="^\s*_{0,2}E[ON][A-Z_]+(?=\s*($|\)))" /></context>
    
    </contexts>
    
    
    <itemDatas>
      <itemData name="Normal Text"	defStyleNum="dsNormal" />
      <itemData name="Comment"		defStyleNum="dsComment" />
      <itemData name="Keyword" 		defStyleNum="dsKeyword" />
      <itemData name="Control" 		defStyleNum="dsKeyword" />
      <itemData name="Builtin" 		defStyleNum="dsKeyword" color="#808" />
      <itemData name="Command" 		defStyleNum="dsKeyword" color="#c0c" />
      <itemData name="Redirection" 	defStyleNum="dsKeyword" color="#238" />
      <itemData name="Escape" 		defStyleNum="dsDataType" />
      <itemData name="String SingleQ" 	defStyleNum="dsString" />
      <itemData name="String DoubleQ" 	defStyleNum="dsString" />
      <itemData name="Backquote" 	defStyleNum="dsKeyword" />
      <itemData name="String Transl." 	defStyleNum="dsString" />
      <itemData name="String Escape" 	defStyleNum="dsDataType" />
      <itemData name="Variable" 	defStyleNum="dsOthers" />
      <itemData name="Expression" 	defStyleNum="dsOthers" />
      <itemData name="Function" 	defStyleNum="dsChar" bold="1" />
      <itemData name="Path" 		defStyleNum="dsNormal" />
      <itemData name="Option" 		defStyleNum="dsNormal" />
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="#"/>
    </comments>
    <keywords casesensitive="1" weakDeliminator="^%#$._{}:-" additionalDeliminator="`"/>
  </general>
</language>
