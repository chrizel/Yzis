--	Autogenerated test script from test_vim_pattern.vim--	do not modify by hand

require('luaunit')
require('utils')
require('vimregexp')

TestVimRegexp = {} --class

	function TestVimRegexp:test01()
		--******
		assertEquals(VimRegexp([[a*b]]):match('aaab'), true )
		assertEquals(VimRegexp([[a*b]]):match('ab'), true )
		assertEquals(VimRegexp([[a*b]]):match('b'), true )
		assertEquals(VimRegexp([[a*b]]):match('a'), false )
	end

	function TestVimRegexp:test02()
		--++++++
		assertEquals(VimRegexp([[a\+b]]):match('aaab'), true )
		assertEquals(VimRegexp([[a\+b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\+b]]):match('b'), false )
		assertEquals(VimRegexp([[a\+b]]):match('a'), false )
	end

	function TestVimRegexp:test03()
		--======
		assertEquals(VimRegexp([[a\=b]]):match('aaab'), true )
		assertEquals(VimRegexp([[a\=b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\=b]]):match('b'), true )
		assertEquals(VimRegexp([[a\=b]]):match('a'), false )
		assertEquals(VimRegexp([[ab\=]]):match('abbb'), true )
	end

	function TestVimRegexp:test04()
		--??????
		assertEquals(VimRegexp([[a\?b]]):match('aaab'), true )
		assertEquals(VimRegexp([[a\?b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\?b]]):match('b'), true )
		assertEquals(VimRegexp([[a\?b]]):match('a'), false )
		assertEquals(VimRegexp([[ab\?]]):match('abbb'), true )
	end

	function TestVimRegexp:test05()
		--{{{{{{}}}}}}
		assertEquals(VimRegexp([[a\{1}b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\{1}b]]):match('b'), false )
		assertEquals(VimRegexp([[a\{0,1}b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\{0,1}b]]):match('b'), true )
		assertEquals(VimRegexp([[a\{,2}b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\{,2}b]]):match('b'), true )
		assertEquals(VimRegexp([[a\{,2}b]]):match('aab'), true )
		assertEquals(VimRegexp([[a\{}b]]):match('ab'), true )
		assertEquals(VimRegexp([[a\{}b]]):match('b'), true )
		assertEquals(VimRegexp([[a\{}b]]):match('aab'), true )
	end

	function TestVimRegexp:test06()
		--^^^
		assertEquals(VimRegexp([[^aa]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[aa^]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[^bb]]):match('aa^bb'), false )
		assertEquals(VimRegexp([[^aa^bb]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[^aa\^bb]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[\^aa\^bb]]):match('aa^bb'), false )
		assertEquals(VimRegexp([[\^aa\^bb]]):match('^aa^bb'), true )
	end

	function TestVimRegexp:test07()
		--[ [ [ ] ] ]
		assertEquals(VimRegexp('[a]'):match('a'), true )
		assertEquals(VimRegexp('[^a]'):match('a'), false )
		assertEquals(VimRegexp('[a^]'):match('a'), true )
		assertEquals(VimRegexp('[a^]'):match('^'), true )
		assertEquals(VimRegexp([[x\|y\|^aa]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[\(^aa\)]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[x\|y\|^bb]]):match('aa^bb'), false )
		assertEquals(VimRegexp([[\(^bb\)]]):match('aa^bb'), false )
	end

	function TestVimRegexp:test08()
		--$$$$$
		assertEquals(VimRegexp([[bb$]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[$bb]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[aa$]]):match('aa$bb'), false )
		assertEquals(VimRegexp([[aa$bb$]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[bb$\|x\|y]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[aa$\|x\|y]]):match('aa$bb'), false )
		assertEquals(VimRegexp([[\(bb$\)]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[\(aa$\)]]):match('aa$bb'), false )
	end

	function TestVimRegexp:test09()
		--<<<<
		assertEquals(VimRegexp([[\<aa]]):match('aa bbccdd'), true )
		assertEquals(VimRegexp([[\<bb]]):match('aa bbccdd'), true )
		assertEquals(VimRegexp([[\<cc]]):match('aa bbccdd'), false )
		assertEquals(VimRegexp([[\<dd]]):match('aa bbccdd'), false )
	end

	function TestVimRegexp:test10()
		-->>>
		assertEquals(VimRegexp([[aa\>]]):match('aa bbccdd'), true )
		assertEquals(VimRegexp([[bb\>]]):match('aa bbccdd'), false )
		assertEquals(VimRegexp([[cc\>]]):match('aa bbccdd'), false )
		assertEquals(VimRegexp([[dd\>]]):match('aa bbccdd'), true )
	end

	function TestVimRegexp:test11()
		--|||||
		assertEquals(VimRegexp([[a|b\|c]]):match('a'), false )
		assertEquals(VimRegexp([[a|b\|c]]):match('b'), false )
		assertEquals(VimRegexp([[a|b\|c]]):match('c'), true )
		assertEquals(VimRegexp([[a|b\|c]]):match('a|b'), true )
		assertEquals(VimRegexp([[a|b\|c]]):match('b|c'), true )
		assertEquals(VimRegexp([[a|b\|c]]):match('a|b|c'), true )
	end

	function TestVimRegexp:test12()
		--(((())))
		assertEquals(VimRegexp([[a(b)\(c\)]]):match('a(b)(c)'), false )
		assertEquals(VimRegexp([[a(b)\(c\)]]):match('ab(c)'), false )
		assertEquals(VimRegexp([[a(b)\(c\)]]):match('a(b)c'), true )
		assertEquals(VimRegexp([[a(b)\(c\)]]):match('abc'), false )
	end

	function TestVimRegexp:test13()
		--\1\2\3
		assertEquals(VimRegexp([[a(b)\(c\)_\1]]):match('a(b)c_c'), true )
		assertEquals(VimRegexp([[a(b)\(c\)_\1]]):match('a(b)c_b'), false )
	end

	function TestVimRegexp:test14()
		--\d\D
		assertEquals(VimRegexp([[\d]]):match('1'), true )
		assertEquals(VimRegexp([[\d]]):match('a'), false )
		assertEquals(VimRegexp([[\d]]):match('_'), false )
		assertEquals(VimRegexp([[\d]]):match(' '), false )
		assertEquals(VimRegexp([[\d]]):match('\n'), false )
		assertEquals(VimRegexp([[\d]]):match('\t'), false )
		assertEquals(VimRegexp([[\D]]):match('1'), false )
		assertEquals(VimRegexp([[\D]]):match('a'), true )
		assertEquals(VimRegexp([[\D]]):match('_'), true )
		assertEquals(VimRegexp([[\D]]):match(' '), true )
		assertEquals(VimRegexp([[\D]]):match('\n'), true )
		assertEquals(VimRegexp([[\D]]):match('\t'), true )
	end

	function TestVimRegexp:test15()
		--\s\S
		assertEquals(VimRegexp([[\s]]):match('1'), false )
		assertEquals(VimRegexp([[\s]]):match('a'), false )
		assertEquals(VimRegexp([[\s]]):match('_'), false )
		assertEquals(VimRegexp([[\s]]):match(' '), true )
		assertEquals(VimRegexp([[\s]]):match('\t'), true )
		assertEquals(VimRegexp([[\s]]):match('\n'), true )
		assertEquals(VimRegexp([[\S]]):match('1'), true )
		assertEquals(VimRegexp([[\S]]):match('a'), true )
		assertEquals(VimRegexp([[\S]]):match('_'), true )
		assertEquals(VimRegexp([[\S]]):match(' '), false )
		assertEquals(VimRegexp([[\S]]):match('\t'), false )
		assertEquals(VimRegexp([[\S]]):match('\n'), false )
	end

	function TestVimRegexp:test16()
		--\x\X
		assertEquals(VimRegexp([[\x]]):match('1'), true )
		assertEquals(VimRegexp([[\x]]):match('a'), true )
		assertEquals(VimRegexp([[\x]]):match('A'), true )
		assertEquals(VimRegexp([[\x]]):match('g'), false )
		assertEquals(VimRegexp([[\x]]):match('_'), false )
		assertEquals(VimRegexp([[\x]]):match(' '), false )
		assertEquals(VimRegexp([[\X]]):match('1'), false )
		assertEquals(VimRegexp([[\X]]):match('a'), false )
		assertEquals(VimRegexp([[\X]]):match('A'), false )
		assertEquals(VimRegexp([[\X]]):match('g'), true )
		assertEquals(VimRegexp([[\X]]):match('_'), true )
		assertEquals(VimRegexp([[\X]]):match(' '), true )
	end

	function TestVimRegexp:test17()
		--\o\O
		assertEquals(VimRegexp([[\o]]):match('1'), true )
		assertEquals(VimRegexp([[\o]]):match('a'), false )
		assertEquals(VimRegexp([[\o]]):match('A'), false )
		assertEquals(VimRegexp([[\o]]):match('8'), false )
		assertEquals(VimRegexp([[\o]]):match('_'), false )
		assertEquals(VimRegexp([[\o]]):match(' '), false )
		assertEquals(VimRegexp([[\O]]):match('1'), false )
		assertEquals(VimRegexp([[\O]]):match('a'), true )
		assertEquals(VimRegexp([[\O]]):match('A'), true )
		assertEquals(VimRegexp([[\O]]):match('8'), true )
		assertEquals(VimRegexp([[\O]]):match('_'), true )
		assertEquals(VimRegexp([[\O]]):match(' '), true )
	end

	function TestVimRegexp:test18()
		--\w\W
		assertEquals(VimRegexp([[\w]]):match('1'), true )
		assertEquals(VimRegexp([[\w]]):match('a'), true )
		assertEquals(VimRegexp([[\w]]):match('A'), true )
		assertEquals(VimRegexp([[\w]]):match('_'), true )
		assertEquals(VimRegexp([[\w]]):match(' '), false )
		assertEquals(VimRegexp([[\w]]):match(','), false )
		assertEquals(VimRegexp([[\W]]):match('1'), false )
		assertEquals(VimRegexp([[\W]]):match('a'), false )
		assertEquals(VimRegexp([[\W]]):match('A'), false )
		assertEquals(VimRegexp([[\W]]):match('_'), false )
		assertEquals(VimRegexp([[\W]]):match(' '), true )
		assertEquals(VimRegexp([[\W]]):match(','), true )
	end

	function TestVimRegexp:test19()
		--\h\H
		assertEquals(VimRegexp([[\h]]):match('1'), false )
		assertEquals(VimRegexp([[\h]]):match('a'), true )
		assertEquals(VimRegexp([[\h]]):match('A'), true )
		assertEquals(VimRegexp([[\h]]):match('_'), true )
		assertEquals(VimRegexp([[\h]]):match(' '), false )
		assertEquals(VimRegexp([[\h]]):match(','), false )
		assertEquals(VimRegexp([[\H]]):match('1'), true )
		assertEquals(VimRegexp([[\H]]):match('a'), false )
		assertEquals(VimRegexp([[\H]]):match('A'), false )
		assertEquals(VimRegexp([[\H]]):match('_'), false )
		assertEquals(VimRegexp([[\H]]):match(' '), true )
		assertEquals(VimRegexp([[\H]]):match(','), true )
	end

	function TestVimRegexp:test20()
		--\a\A
		assertEquals(VimRegexp([[\a]]):match('1'), false )
		assertEquals(VimRegexp([[\a]]):match('a'), true )
		assertEquals(VimRegexp([[\a]]):match('A'), true )
		assertEquals(VimRegexp([[\a]]):match('_'), false )
		assertEquals(VimRegexp([[\a]]):match(' '), false )
		assertEquals(VimRegexp([[\a]]):match(','), false )
		assertEquals(VimRegexp([[\A]]):match('1'), true )
		assertEquals(VimRegexp([[\A]]):match('a'), false )
		assertEquals(VimRegexp([[\A]]):match('A'), false )
		assertEquals(VimRegexp([[\A]]):match('_'), true )
		assertEquals(VimRegexp([[\A]]):match(' '), true )
		assertEquals(VimRegexp([[\A]]):match(','), true )
	end

	function TestVimRegexp:test21()
		--\l\L
		assertEquals(VimRegexp([[\l]]):match('1'), false )
		assertEquals(VimRegexp([[\l]]):match('a'), true )
		assertEquals(VimRegexp([[\l]]):match('A'), false )
		assertEquals(VimRegexp([[\l]]):match('_'), false )
		assertEquals(VimRegexp([[\l]]):match(' '), false )
		assertEquals(VimRegexp([[\l]]):match(','), false )
		assertEquals(VimRegexp([[\L]]):match('1'), true )
		assertEquals(VimRegexp([[\L]]):match('a'), false )
		assertEquals(VimRegexp([[\L]]):match('A'), true )
		assertEquals(VimRegexp([[\L]]):match('_'), true )
		assertEquals(VimRegexp([[\L]]):match(' '), true )
		assertEquals(VimRegexp([[\L]]):match(','), true )
	end

	function TestVimRegexp:test22()
		--\u\U
		assertEquals(VimRegexp([[\u]]):match('1'), false )
		assertEquals(VimRegexp([[\u]]):match('a'), false )
		assertEquals(VimRegexp([[\u]]):match('A'), true )
		assertEquals(VimRegexp([[\u]]):match('_'), false )
		assertEquals(VimRegexp([[\u]]):match(' '), false )
		assertEquals(VimRegexp([[\u]]):match(','), false )
		assertEquals(VimRegexp([[\U]]):match('1'), true )
		assertEquals(VimRegexp([[\U]]):match('a'), true )
		assertEquals(VimRegexp([[\U]]):match('A'), false )
		assertEquals(VimRegexp([[\U]]):match('_'), true )
		assertEquals(VimRegexp([[\U]]):match(' '), true )
		assertEquals(VimRegexp([[\U]]):match(','), true )
	end

	function TestVimRegexp:test23()
		--[:alnum:]]
		assertEquals(VimRegexp('[[:alnum:]]'):match('1'), true )
		assertEquals(VimRegexp('[[:alnum:]]'):match('a'), true )
		assertEquals(VimRegexp('[[:alnum:]]'):match('A'), true )
		assertEquals(VimRegexp('[[:alnum:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:alnum:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:alnum:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:alnum:]]'):match('1'), false )
		assertEquals(VimRegexp('[^[:alnum:]]'):match('a'), false )
		assertEquals(VimRegexp('[^[:alnum:]]'):match('A'), false )
		assertEquals(VimRegexp('[^[:alnum:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:alnum:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:alnum:]]'):match(','), true )
	end

	function TestVimRegexp:test24()
		--[:alpha:]]
		assertEquals(VimRegexp('[[:alpha:]]'):match('1'), false )
		assertEquals(VimRegexp('[[:alpha:]]'):match('a'), true )
		assertEquals(VimRegexp('[[:alpha:]]'):match('A'), true )
		assertEquals(VimRegexp('[[:alpha:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:alpha:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:alpha:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:alpha:]]'):match('1'), true )
		assertEquals(VimRegexp('[^[:alpha:]]'):match('a'), false )
		assertEquals(VimRegexp('[^[:alpha:]]'):match('A'), false )
		assertEquals(VimRegexp('[^[:alpha:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:alpha:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:alpha:]]'):match(','), true )
	end

	function TestVimRegexp:test25()
		--[:blank:]]
		assertEquals(VimRegexp('[[:blank:]]'):match('1'), false )
		assertEquals(VimRegexp('[[:blank:]]'):match('a'), false )
		assertEquals(VimRegexp('[[:blank:]]'):match('A'), false )
		assertEquals(VimRegexp('[[:blank:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:blank:]]'):match(' '), true )
		assertEquals(VimRegexp('[[:blank:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:blank:]]'):match('1'), true )
		assertEquals(VimRegexp('[^[:blank:]]'):match('a'), true )
		assertEquals(VimRegexp('[^[:blank:]]'):match('A'), true )
		assertEquals(VimRegexp('[^[:blank:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:blank:]]'):match(' '), false )
		assertEquals(VimRegexp('[^[:blank:]]'):match(','), true )
	end

	function TestVimRegexp:test26()
		--[:digit:]]
		assertEquals(VimRegexp('[[:digit:]]'):match('1'), true )
		assertEquals(VimRegexp('[[:digit:]]'):match('a'), false )
		assertEquals(VimRegexp('[[:digit:]]'):match('A'), false )
		assertEquals(VimRegexp('[[:digit:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:digit:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:digit:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:digit:]]'):match('1'), false )
		assertEquals(VimRegexp('[^[:digit:]]'):match('a'), true )
		assertEquals(VimRegexp('[^[:digit:]]'):match('A'), true )
		assertEquals(VimRegexp('[^[:digit:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:digit:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:digit:]]'):match(','), true )
	end

	function TestVimRegexp:test27()
		--[:lower:]]
		assertEquals(VimRegexp('[[:lower:]]'):match('1'), false )
		assertEquals(VimRegexp('[[:lower:]]'):match('a'), true )
		assertEquals(VimRegexp('[[:lower:]]'):match('A'), false )
		assertEquals(VimRegexp('[[:lower:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:lower:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:lower:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:lower:]]'):match('1'), true )
		assertEquals(VimRegexp('[^[:lower:]]'):match('a'), false )
		assertEquals(VimRegexp('[^[:lower:]]'):match('A'), true )
		assertEquals(VimRegexp('[^[:lower:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:lower:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:lower:]]'):match(','), true )
	end

	function TestVimRegexp:test28()
		--[[:space:]]
		assertEquals(VimRegexp('[[:space:]]'):match('1'), false )
		assertEquals(VimRegexp('[[:space:]]'):match('a'), false )
		assertEquals(VimRegexp('[[:space:]]'):match('A'), false )
		assertEquals(VimRegexp('[[:space:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:space:]]'):match(' '), true )
		assertEquals(VimRegexp('[[:space:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:space:]]'):match('1'), true )
		assertEquals(VimRegexp('[^[:space:]]'):match('a'), true )
		assertEquals(VimRegexp('[^[:space:]]'):match('A'), true )
		assertEquals(VimRegexp('[^[:space:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:space:]]'):match(' '), false )
		assertEquals(VimRegexp('[^[:space:]]'):match(','), true )
	end

	function TestVimRegexp:test29()
		--[[:upper:]]
		assertEquals(VimRegexp('[[:upper:]]'):match('1'), false )
		assertEquals(VimRegexp('[[:upper:]]'):match('a'), false )
		assertEquals(VimRegexp('[[:upper:]]'):match('A'), true )
		assertEquals(VimRegexp('[[:upper:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:upper:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:upper:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:upper:]]'):match('1'), true )
		assertEquals(VimRegexp('[^[:upper:]]'):match('a'), true )
		assertEquals(VimRegexp('[^[:upper:]]'):match('A'), false )
		assertEquals(VimRegexp('[^[:upper:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:upper:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:upper:]]'):match(','), true )
	end

	function TestVimRegexp:test30()
		--[[:xdigit:]]
		assertEquals(VimRegexp('[[:xdigit:]]'):match('1'), true )
		assertEquals(VimRegexp('[[:xdigit:]]'):match('a'), true )
		assertEquals(VimRegexp('[[:xdigit:]]'):match('A'), true )
		assertEquals(VimRegexp('[[:xdigit:]]'):match('g'), false )
		assertEquals(VimRegexp('[[:xdigit:]]'):match('_'), false )
		assertEquals(VimRegexp('[[:xdigit:]]'):match(' '), false )
		assertEquals(VimRegexp('[[:xdigit:]]'):match(','), false )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match('1'), false )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match('a'), false )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match('A'), false )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match('g'), true )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match('_'), true )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match(' '), true )
		assertEquals(VimRegexp('[^[:xdigit:]]'):match(','), true )
	end

	function TestVimRegexp:test31()
		--\%( \)
		assertEquals(VimRegexp([[\(a\)b\%(c\)\(d\)_\1_\2]]):match('abcd_a_d'), true )
		assertEquals(VimRegexp([[\(a\)b\%(c\)\(d\)_\1_\2]]):match('abcd_a_c'), false )
	end

	function TestVimRegexp:test32()
		--\_^
		assertEquals(VimRegexp([[\_^aa]]):match('aa'), true )
		assertEquals(VimRegexp([[\_^aa]]):match('^aa'), false )
		assertEquals(VimRegexp([[aa\_^bb]]):match('aa^bb'), false )
		assertEquals(VimRegexp([[aa\_^bb]]):match('bb'), false )
		assertEquals(VimRegexp([[aa\^bb]]):match('aa^bb'), true )
		assertEquals(VimRegexp([[aa^bb]]):match('aa^bb'), true )
	end

	function TestVimRegexp:test33()
		--\_$
		assertEquals(VimRegexp([[aa\_$]]):match('aa'), true )
		assertEquals(VimRegexp([[aa\_$]]):match('aa$'), false )
		assertEquals(VimRegexp([[aa\_$bb]]):match('aa$bb'), false )
		assertEquals(VimRegexp([[aa\_$bb]]):match('bb'), false )
		assertEquals(VimRegexp([[aa\$bb]]):match('aa$bb'), true )
		assertEquals(VimRegexp([[aa$bb]]):match('aa$bb'), true )
	end

	function TestVimRegexp:test34()
		--unsupported
		assertError( VimRegexp, [[ [:return:] ]] )
		assertError( VimRegexp, [[ [:tab:] ]] )
		assertError( VimRegexp, [[ [:graph:] ]] )
		assertError( VimRegexp, [[ [:print:] ]] )
		assertError( VimRegexp, [[ [:punct:] ]] )
		assertError( VimRegexp, [[ \& ]] )
		assertError( VimRegexp, [[ {- ]] )
		assertError( VimRegexp, [[ \@>	 ]] )
		assertError( VimRegexp, [[ \@= ]] )
		assertError( VimRegexp, [[ \@! ]] )
		assertError( VimRegexp, [[ \@<= ]] )
		assertError( VimRegexp, [[ \@<! ]] )
		assertError( VimRegexp, [[ \zs ]] )
		assertError( VimRegexp, [[ \ze ]] )
		assertError( VimRegexp, [[ \_. ]] )
		assertError( VimRegexp, [[ \%^ ]] )
		assertError( VimRegexp, [[ \%$ ]] )
		assertError( VimRegexp, [[ \%# ]] )
		assertError( VimRegexp, [[ \%23l ]] )
		assertError( VimRegexp, [[ \%23c ]] )
		assertError( VimRegexp, [[ \%23v ]] )
		assertError( VimRegexp, [[ \i ]] )
		assertError( VimRegexp, [[ \I ]] )
		assertError( VimRegexp, [[ \k ]] )
		assertError( VimRegexp, [[ \K ]] )
		assertError( VimRegexp, [[ \f ]] )
		assertError( VimRegexp, [[ \F ]] )
		assertError( VimRegexp, [[ \p ]] )
		assertError( VimRegexp, [[ \P ]] )
		assertError( VimRegexp, [[ \t ]] )
		assertError( VimRegexp, [[ \e ]] )
		assertError( VimRegexp, [[ \r ]] )
		assertError( VimRegexp, [[ \b ]] )
		assertError( VimRegexp, [[ \n ]] )
		assertError( VimRegexp, [[ \~ ]] )
		assertError( VimRegexp, [[ \z1 ]] )
		assertError( VimRegexp, [[ \z9 ]] )
		assertError( VimRegexp, [[ \%[ ]] )
		assertError( VimRegexp, [[ \c ]] )
		assertError( VimRegexp, [[ \C ]] )
		assertError( VimRegexp, [[ \Z ]] )
		assertError( VimRegexp, [[ \v ]] )
		assertError( VimRegexp, [[ \V ]] )
		assertError( VimRegexp, [[ \m ]] )
		assertError( VimRegexp, [[ \M ]] )
	end



if not _REQUIREDNAME then
    return LuaUnit:run() -- will execute all tests
end
